)
gmap
#saveWidget(gmap, 'US_county_cancer_poll_map.html', selfcontained = TRUE)
gmap <- leaflet(data = cancermap) %>%
# Base groups
addTiles() %>%
setView(lng = -105, lat = 40, zoom = 4) %>%
addPolygons(fillColor = ~pal(rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat,
group="Cancer Rate/100,000 by Counties") %>%
# Overlay groups
addMarkers(data=LandUse,lat=~lat, lng=~lng, popup=popup_LU, group = "Land Use Sites") %>%
#addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
#addPolygons(data = outline, lng = ~long, lat = ~lat,
#           fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
addMarkers(data=CountryPop,lat=~lat, lng=~lon, popup=popup_Pop, icon=PoppulationIcon, group = "Country Population") %>%
# To Add the Earthquake Icon into the gmap
# define icon
# enable the option to cluter markers when there are too many markers near by
addAwesomeMarkers(data=EarthQuake,lat=~Lat, lng=~Lon, popup=popup_EA, icon=icons, group = "Earthquake Location", clusterOptions = markerClusterOptions()) %>%
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
addLayersControl(
baseGroups = c("Cancer Rate/100,000 by Counties"),
overlayGroups = c("Land Use Sites","Earthquake Location","Country Population"),
options = layersControlOptions(collapsed = TRUE)
)
gmap
StarBucksLoc<-read.csv('USStarBucksLoc.csv')
View(StarBucksLoc)
state<-  lapply(StarBucksLoc$BriefInfo, function(x) {   strsplit(as.character(x),"-")[1][[1]][2])
state<-  lapply(StarBucksLoc$BriefInfo, function(x) {   strsplit(as.character(x),"-")[1][[1]][2]
})
StarBucksLoc<-read.csv('USStarBucksLoc.csv')
state<-  lapply(StarBucksLoc$BriefInfo, function(x) {   strsplit(as.character(x),"-")[1][[1]][2]
})
StarBucksLoc$State <- unlist(state)
View(StarBucksLoc)
head(StarBucksLoc)
View(StarBucksLoc)
StoreNo <-lapply(StarBucksLoc$BriefInfo, function(x) {   temp<-strsplit(as.character(x),"-")[1][[1]][3]
substrRight(temp,5)
})
StarBucksLoc$StoreNo <- unlist(StoreNo)
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
StoreNo<-lapply(StarBucksLoc$BriefInfo, function(x) {   temp<-strsplit(as.character(x),"-")[1][[1]][3]
substrRight(temp,5)
})
StarBucksLoc$StoreNo <- unlist(StoreNo)
City<-apply(StarBucksLoc$BriefInfo, function(x) {temp<-strsplit(as.character(x),"-")[1][[1]][3]
substr(temp,1, nchar(temp)-5)
})
StarBucksLoc$City <- unlist(City)
City<-apply(StarBucksLoc$BriefInfo, function(x) {temp<-strsplit(as.character(x),"-")[1][[1]][3]
substr(temp,1, nchar(temp)-5)
})
City<-lapply(StarBucksLoc$BriefInfo, function(x) {temp<-strsplit(as.character(x),"-")[1][[1]][3]
substr(temp, 1, nchar(temp)-5)
})
StarBucksLoc$City <- unlist(City)
View(StarBucksLoc)
postal <-lapply(StarBucksLoc$Address, function(x) { strsplit(as.character(x),",")[1][[1]][2]
})
StarBucksLoc$Postal <- unlist(City)
View(StarBucksLoc)
View(StarBucksLoc)
head(StarBucksLoc)
postal <-lapply(StarBucksLoc$Address, function(x) { temp<-strsplit(as.character(x),",")[1][[1]][2]
strsplit(temp," ")[1][[1]][2]
})
postal <-lapply(StarBucksLoc$Address, function(x) { temp<-strsplit(as.character(x),",")[1][[1]][2]
strsplit(temp," ")[1][[1]][3]
})
StarBucksLoc$Postal <- unlist(City)
View(postal)
View(StarBucksLoc)
postal <-lapply(StarBucksLoc$Address, function(x) { temp<-strsplit(as.character(x),",")[1][[1]][3]
strsplit(temp," ")[1][[1]][3]
})
StarBucksLoc$Postal <- unlist(City)
View(postal)
StarBucksLoc<-read.csv('USStarBucksLoc.csv')
#to extract the state from the store infomatin
state<-  lapply(StarBucksLoc$BriefInfo, function(x) {   strsplit(as.character(x),"-")[1][[1]][2]
})
StarBucksLoc$State <- unlist(state)
#to extract the store number from the store information
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
StoreNo<-lapply(StarBucksLoc$BriefInfo, function(x) {   temp<-strsplit(as.character(x),"-")[1][[1]][3]
substrRight(temp,5)
})
StarBucksLoc$StoreNo <- unlist(StoreNo)
## to extract city  from store infomation
City<-lapply(StarBucksLoc$BriefInfo, function(x) {temp<-strsplit(as.character(x),"-")[1][[1]][3]
substr(temp, 1, nchar(temp)-5)
})
StarBucksLoc$City <- unlist(City)
popup_Pop <- paste0("<strong>Store No: </strong>",
StarBucksLoc$StoreNo,
"<br><strong>State: </strong>",
StarBucksLoc$State,
"<br><strong>City: </strong>",
StarBucksLoc$City,
"<br><strong>Address: </strong>",
StarBucksLoc$Address
)
StarBucksIcon <- makeIcon(
iconUrl = "Starbucks.png",
iconWidth = 13, iconHeight = 31,
iconAnchorX = 7, iconAnchorY = 30
)
StarBucksIcon <- makeIcon(
#http://niceclipart.com/12245/starbucks.html/starbucks-clipart-13
iconUrl = "Starbucks.png",
iconWidth = 13, iconHeight = 31,
iconAnchorX = 7, iconAnchorY = 30
)
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
#This data source contains data representing seismic events in different countries over a seven-day period in 2012.
#Earthquake data is collected in real-time by geological institutions worldwide, such as the United States Geological Survey (USGS).
#You can find further details about the data types on the USGS website.
#The date source if from: http://js.cit.datalens.api.here.com/datasets/starter_pack/Earthquakes_7day.csv
# Src	String	Two-letter network code representing the data contributor which recorded the earthquake
# Eqid	String	Unique earthquake ID
# Version	String	Version of the record
# Datetime	Date	Date and time of the earthquake
# Lat	Number	Latitude of the earthquake location
# Lon	Number	Longitude of the earthquake location
# Magnitude	Number	Magnitude of the earthquake
# Depth	Number	Depth of the earthquake
# NST	Number	Total number of earthquake-reporting stations used to determine the location of the earthquake
# Region	String	Region where the earthquake occurred
EarthQuake <- read.csv('Earthquakes_7day.csv')
### Format the datetime to yyyy-mm-dd for ease of read
## original datetime example is Wednesday, September 26, 2012 15:07:51 UTC
EarthQuake$Datetime<- as.Date(as.character(EarthQuake$Datetime), format = "%A, %B %d, %Y %H:%M:%S")
#To take necessary columns for the plot
EarthQuake <- EarthQuake[c('Lat','Lon','Magnitude','Depth','Region','Datetime')]
popup_EA <- paste0("<strong>Region: </strong>",
EarthQuake$Region,
"<br><strong>Date: </strong>",
EarthQuake$Datetime,
"<br><strong>Magnitude: </strong>",
EarthQuake$Magnitude,
"<br><strong>Depth: </strong>",
EarthQuake$Depth
)
## to define the colors of icon based on the magnitude of earthquake
getColor <- function(EarthQuake) {
sapply(EarthQuake$Magnitude, function(mag) {
if(mag <= 4) {
"green"
} else if(mag <= 5) {
"orange"
} else {
"red"
} })
}
## To define a icon to be added for earthquake map
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor = getColor(EarthQuake)
)
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
#This data source contains data representing country populations
#as measured by the World Bank in 2013,
#represented by the country's name, ISO code,
#geographical co-ordinates (latitude, longitude) and population.
# recID	Number	Record ID of the entry
# CountryName	String	Name of country
# CountryCode	String	ISO 3166-1 alpha-3 country code
# pop_2013	Number	Population in 2013
# lat	Number	Latitude of country location
# lon	Number	Longitude of country location
CountryPop<-read.csv('Global_country_populations_2013.csv')
popup_Pop <- paste0("<strong>Country Name: </strong>",
CountryPop$CountryName,
"<br><strong>Country Code: </strong>",
CountryPop$CountryCode,
"<br><strong>Population: </strong>",
CountryPop$pop_2013
)
PoppulationIcon <- makeIcon(
#https://www.iconfinder.com/icons/1420619/holding_leaflet_man_pamphlet_paper_person_reading_icon
iconUrl = "icon.png",
iconWidth = 13, iconHeight = 31,
iconAnchorX = 7, iconAnchorY = 30
)
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
StarBucksLoc<-read.csv('USStarBucksLoc.csv')
#to extract the state from the store infomatin
state<-  lapply(StarBucksLoc$BriefInfo, function(x) {   strsplit(as.character(x),"-")[1][[1]][2]
})
StarBucksLoc$State <- unlist(state)
#to extract the store number from the store information
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
StoreNo<-lapply(StarBucksLoc$BriefInfo, function(x) {   temp<-strsplit(as.character(x),"-")[1][[1]][3]
substrRight(temp,5)
})
StarBucksLoc$StoreNo <- unlist(StoreNo)
## to extract city  from store infomation
City<-lapply(StarBucksLoc$BriefInfo, function(x) {temp<-strsplit(as.character(x),"-")[1][[1]][3]
substr(temp, 1, nchar(temp)-5)
})
StarBucksLoc$City <- unlist(City)
popup_Star <- paste0("<strong>Store No: </strong>",
StarBucksLoc$StoreNo,
"<br><strong>State: </strong>",
StarBucksLoc$State,
"<br><strong>City: </strong>",
StarBucksLoc$City,
"<br><strong>Address: </strong>",
StarBucksLoc$Address
)
StarBucksIcon <- makeIcon(
#http://niceclipart.com/12245/starbucks.html/starbucks-clipart-13
iconUrl = "Starbucks.png",
iconWidth = 13, iconHeight = 31,
iconAnchorX = 7, iconAnchorY = 30
)
View(StarBucksLoc)
gmap <- leaflet(data = cancermap) %>%
# Base groups
addTiles() %>%
setView(lng = -105, lat = 40, zoom = 4) %>%
addPolygons(fillColor = ~pal(rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat,
group="Cancer Rate/100,000 by Counties") %>%
# Overlay groups
addMarkers(data=LandUse,lat=~lat, lng=~lng, popup=popup_LU, group = "Land Use Sites") %>%
#addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
#addPolygons(data = outline, lng = ~long, lat = ~lat,
#           fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
#add marker for country populationd data
addMarkers(data=CountryPop,lat=~lat, lng=~lon, popup=popup_Pop, icon=PoppulationIcon, group = "Country Population") %>%
# To Add the Earthquake Icon into the gmap
# define icon
# enable the option to cluter markers when there are too many markers near by
addAwesomeMarkers(data=EarthQuake,lat=~Lat, lng=~Lon, popup=popup_EA, icon=icons, group = "Earthquake Location", clusterOptions = markerClusterOptions()) %>%
addMarkers(data=StarBucksLoc,lat=~Lat, lng=~Lon, popup=popup_Star, icon=StarBucksIcon, group = "US StarBucks Loc") %>%
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
addLayersControl(
baseGroups = c("Cancer Rate/100,000 by Counties"),
overlayGroups = c("Land Use Sites","Earthquake Location","Country Population","US StarBucks Loc"),
options = layersControlOptions(collapsed = TRUE)
)
gmap
View(StarBucksLoc)
View(EarthQuake)
StarBucksLoc<-read.csv('USStarBucksLoc.csv')
#to extract the state from the store infomatin
state<-  lapply(StarBucksLoc$BriefInfo, function(x) {   strsplit(as.character(x),"-")[1][[1]][2]
})
StarBucksLoc$State <- unlist(state)
#to extract the store number from the store information
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
StoreNo<-lapply(StarBucksLoc$BriefInfo, function(x) {   temp<-strsplit(as.character(x),"-")[1][[1]][3]
substrRight(temp,5)
})
StarBucksLoc$StoreNo <- unlist(StoreNo)
## to extract city  from store infomation
City<-lapply(StarBucksLoc$BriefInfo, function(x) {temp<-strsplit(as.character(x),"-")[1][[1]][3]
substr(temp, 1, nchar(temp)-5)
})
StarBucksLoc$City <- unlist(City)
popup_Star <- paste0("<strong>Store No: </strong>",
StarBucksLoc$StoreNo,
"<br><strong>State: </strong>",
StarBucksLoc$State,
"<br><strong>City: </strong>",
StarBucksLoc$City,
"<br><strong>Address: </strong>",
StarBucksLoc$Address
)
StarBucksIcon <- makeIcon(
#http://niceclipart.com/12245/starbucks.html/starbucks-clipart-13
iconUrl = "Starbucks.png",
iconWidth = 13, iconHeight = 31,
iconAnchorX = 7, iconAnchorY = 30
)
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
#Color Pallette
#pal <- colorQuantile("YlOrRd", NULL, n = 9)
# Render final map in leaflet.The better map is below so this is
## commented out
# leaflet(data = cancermap) %>% addTiles() %>%
#   addPolygons(fillColor = ~pal(rate),
#               fillOpacity = 0.8,
#               color = "#BDBDC3",
#               weight = 1,
#               popup = popup_dat) %>%
#   addMarkers(lat=39.8, lng=-105.2, popup="Rocky Flats SuperFund Site")
#Grouping for map options and User Choices
#https://rstudio.github.io/leaflet/showhide.html
##Make pop up for the land use sites
# Format popup data for leaflet map.
popup_LU <- paste0("<strong>Use Name: </strong>",
LandUse$name,
"<br><strong>Link: </strong>",
LandUse$url)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
gmap <- leaflet(data = cancermap) %>%
# Base groups
addTiles() %>%
setView(lng = -105, lat = 40, zoom = 4) %>%
addPolygons(fillColor = ~pal(rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat,
group="Cancer Rate/100,000 by Counties") %>%
# Overlay groups
addMarkers(data=LandUse,lat=~lat, lng=~lng, popup=popup_LU, group = "Land Use Sites") %>%
#addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
#addPolygons(data = outline, lng = ~long, lat = ~lat,
#           fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
#add marker for country populationd data
addMarkers(data=CountryPop,lat=~lat, lng=~lon, popup=popup_Pop, icon=PoppulationIcon, group = "Country Population") %>%
# To Add the Earthquake Icon into the gmap
# define icon
# enable the option to cluter markers when there are too many markers near by
addAwesomeMarkers(data=EarthQuake,lat=~Lat, lng=~Lon, popup=popup_EA, icon=icons, group = "Earthquake Location", clusterOptions = markerClusterOptions()) %>%
addMarkers(data=StarBucksLoc,lat=~Lat, lng=~Lon, popup=popup_Star, icon=StarBucksIcon, group = "US StarBucks Loc") %>%
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
addLayersControl(
baseGroups = c("Cancer Rate/100,000 by Counties"),
overlayGroups = c("Land Use Sites","Earthquake Location","Country Population","US StarBucks Loc"),
options = layersControlOptions(collapsed = TRUE)
)
gmap
gmap <- leaflet(data = cancermap) %>%
# Base groups
addTiles() %>%
setView(lng = -105, lat = 40, zoom = 4) %>%
addPolygons(fillColor = ~pal(rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat,
group="Cancer Rate/100,000 by Counties") %>%
# Overlay groups
addMarkers(data=LandUse,lat=~lat, lng=~lng, popup=popup_LU, group = "Land Use Sites") %>%
#addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
#addPolygons(data = outline, lng = ~long, lat = ~lat,
#           fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
#add marker for country populationd data
addMarkers(data=CountryPop,lat=~lat, lng=~lon, popup=popup_Pop, icon=PoppulationIcon, group = "Country Population") %>%
# To Add the Earthquake Icon into the gmap
# define icon
# enable the option to cluter markers when there are too many markers near by
addAwesomeMarkers(data=EarthQuake,lat=~Lat, lng=~Lon, popup=popup_EA, icon=icons, group = "Earthquake Location", clusterOptions = markerClusterOptions()) %>%
##add marker for Starbucks location data
addMarkers(data=StarBucksLoc,lat=~Lat, lng=~Lon, popup=popup_Star, icon=StarBucksIcon, group = "US StarBucks Loc",clusterOptions = markerClusterOptions()) %>%
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
addLayersControl(
baseGroups = c("Cancer Rate/100,000 by Counties"),
overlayGroups = c("Land Use Sites","Earthquake Location","Country Population","US StarBucks Loc"),
options = layersControlOptions(collapsed = TRUE)
)
gmap
StarBucksLoc<-read.csv('USStarBucksLoc.csv')
#to extract the state from the store infomatin
state<-  lapply(StarBucksLoc$BriefInfo, function(x) {   strsplit(as.character(x),"-")[1][[1]][2]
})
StarBucksLoc$State <- unlist(state)
#to extract the store number from the store information
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
StoreNo<-lapply(StarBucksLoc$BriefInfo, function(x) {   temp<-strsplit(as.character(x),"-")[1][[1]][3]
substrRight(temp,5)
})
StarBucksLoc$StoreNo <- unlist(StoreNo)
## to extract city  from store infomation
City<-lapply(StarBucksLoc$BriefInfo, function(x) {temp<-strsplit(as.character(x),"-")[1][[1]][3]
substr(temp, 1, nchar(temp)-5)
})
StarBucksLoc$City <- unlist(City)
popup_Star <- paste0("<strong>Store No: </strong>",
StarBucksLoc$StoreNo,
"<br><strong>State: </strong>",
StarBucksLoc$State,
"<br><strong>City: </strong>",
StarBucksLoc$City,
"<br><strong>Address: </strong>",
StarBucksLoc$Address
)
StarBucksIcon <- makeIcon(
#http://niceclipart.com/12245/starbucks.html/starbucks-clipart-13
iconUrl = "Starbucks.png",
iconWidth = 13, iconHeight = 31,
iconAnchorX = 7, iconAnchorY = 30
)
popup_LU <- paste0("<strong>Use Name: </strong>",
LandUse$name,
"<br><strong>Link: </strong>",
LandUse$url)
pal <- colorQuantile("YlOrRd", NULL, n = 9)
gmap <- leaflet(data = cancermap) %>%
# Base groups
addTiles() %>%
setView(lng = -105, lat = 40, zoom = 4) %>%
addPolygons(fillColor = ~pal(rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat,
group="Cancer Rate/100,000 by Counties") %>%
# Overlay groups
addMarkers(data=LandUse,lat=~lat, lng=~lng, popup=popup_LU, group = "Land Use Sites") %>%
#addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
#addPolygons(data = outline, lng = ~long, lat = ~lat,
#           fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
#add marker for country populationd data
addMarkers(data=CountryPop,lat=~lat, lng=~lon, popup=popup_Pop, icon=PoppulationIcon, group = "Country Population") %>%
# To Add the Earthquake Icon into the gmap
# define icon
# enable the option to cluter markers when there are too many markers near by
addAwesomeMarkers(data=EarthQuake,lat=~Lat, lng=~Lon, popup=popup_EA, icon=icons, group = "Earthquake Location", clusterOptions = markerClusterOptions()) %>%
##add marker for Starbucks location data
addMarkers(data=StarBucksLoc,lat=~Lat, lng=~Lon, popup=popup_Star, icon=StarBucksIcon, group = "US StarBucks Loc",clusterOptions = markerClusterOptions()) %>%
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
addLayersControl(
baseGroups = c("Cancer Rate/100,000 by Counties"),
overlayGroups = c("Land Use Sites","Earthquake Location","Country Population","US StarBucks Loc"),
options = layersControlOptions(collapsed = TRUE)
)
gmap
gmap <- leaflet(data = cancermap) %>%
# Base groups
addTiles() %>%
setView(lng = -105, lat = 40, zoom = 4) %>%
addPolygons(fillColor = ~pal(rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat,
group="Cancer Rate/100,000 by Counties") %>%
# Overlay groups
addMarkers(data=LandUse,lat=~lat, lng=~lng, popup=popup_LU, group = "Land Use Sites") %>%
#addCircles(~long, ~lat, ~10^mag/5, stroke = F, group = "Quakes") %>%
#addPolygons(data = outline, lng = ~long, lat = ~lat,
#           fill = F, weight = 2, color = "#FFFFCC", group = "Outline") %>%
# Layers control
#----------------------------Shaoyu Feng-----------------------------#
#----------------------------sf865-----------------------------------#
#add marker for country populationd data
addMarkers(data=CountryPop,lat=~lat, lng=~lon, popup=popup_Pop, icon=PoppulationIcon, group = "Country Population") %>%
# To Add the Earthquake Icon into the gmap
# define icon
# enable the option to cluter markers when there are too many markers near by
addAwesomeMarkers(data=EarthQuake,lat=~Lat, lng=~Lon, popup=popup_EA, icon=icons, group = "Earthquake Location", clusterOptions = markerClusterOptions()) %>%
##add marker for Starbucks location data
addMarkers(data=StarBucksLoc,lat=~Lat, lng=~Lon, popup=popup_Star, icon=StarBucksIcon, group = "US StarBucks Loc",clusterOptions = markerClusterOptions()) %>%
#--------------------------------------------------------------------#
#--------------------------------------------------------------------#
addLayersControl(
baseGroups = c("Cancer Rate/100,000 by Counties"),
overlayGroups = c("Land Use Sites","Earthquake Location","Country Population","US StarBucks Loc"),
options = layersControlOptions(collapsed = FALSE)
)
gmap
saveWidget(gmap, 'Interactive_Map.html', selfcontained = TRUE)
